package bot

import (
	"fmt"
	"io"
	"log/slog"
	"net/http"
	"strings"

	"github.com/Oxeeee/discont-bot/internal/domain"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *BotHandler) handleEditDiscountsButton(_ *BotHandler, message *tgbotapi.Message) {
	csvContent, err := b.service.GetDiscountList()
	if err != nil {
		b.sender.SendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", domain.UserRoleAdmin)
		b.log.Error("error while get discount list", "error", err)
		return
	}

	csvBytes := []byte(csvContent)

	doc := tgbotapi.NewDocument(message.Chat.ID, tgbotapi.FileBytes{
		Name:  "places.csv",
		Bytes: csvBytes,
	})

	doc.ReplyMarkup = tgbotapi.ForceReply{
		ForceReply: true,
	}
	doc.Caption = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π CSV —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–∫–∏–¥–æ–∫"
	sentMsg, err := b.bot.Send(doc)
	if err != nil {
		b.log.Error("error while sending csv doc", "error", err)
		b.sender.SendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ CSV —Ñ–∞–π–ª–∞", domain.UserRoleAdmin)
		return
	}
	b.forceReplyHandlers[sentMsg.MessageID] = b.handleCSVFileReply
}

func (b *BotHandler) handleManageUsersButton(_ *BotHandler, message *tgbotapi.Message) {
	kb := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), tgbotapi.NewKeyboardButton("üîÅ –ü–æ–º–µ–Ω—è—Ç—å —Ä–æ–ª—å")),
		tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), tgbotapi.NewKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"), tgbotapi.NewKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")),
	)
	msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ReplyMarkup = kb
	_, err := b.bot.Send(msg)
	if err != nil {
		b.log.Error("Error while sending message", slog.Any("error", err))
	}
}

func (b *BotHandler) handleAddUserButton(_ *BotHandler, message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü—Ä–∏–º–µ—Ä: (@petrushin_leonid):")
	msg.ReplyMarkup = tgbotapi.ForceReply{ForceReply: true}
	sentMsg, err := b.bot.Send(msg)
	if err != nil {
		b.log.Error("error while sending user nickname", slog.Any("error", err))
		return
	}
	b.forceReplyHandlers[sentMsg.MessageID] = b.handleAddUser
}

func (b *BotHandler) handleAddUser(_ *BotHandler, message *tgbotapi.Message) {
	nickname := message.Text
	nickname = strings.TrimPrefix(nickname, "@")
	userRole, err := b.service.GetUserRole(uint(message.From.ID))
	if err != nil {
		b.sender.SendErrorMessage(message.Chat.ID, err.Error(), domain.UserRole(userRole))
		b.log.Error("error while get user role", "error", err)
		return
	}
	if err := b.service.ManageWhitelist(nickname, "add"); err != nil {
		b.log.Error("error while whitlistening user", "error", err)
		b.sender.SendErrorMessage(message.Chat.ID, err.Error(), domain.UserRole(userRole))
		return
	}
	b.sender.SendSuccessMessage(message.Chat.ID, fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –¥–æ–±–∞–≤–ª–µ–Ω", nickname), domain.UserRole(userRole))
}

func (b *BotHandler) handleChangeRoleButton(_ *BotHandler, message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: @petrushin_leonid):")
	msg.ReplyMarkup = tgbotapi.ForceReply{ForceReply: true}
	sentMsg, err := b.bot.Send(msg)
	if err != nil {
		b.log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–≤–æ–¥ –Ω–∏–∫–Ω–µ–π–º–∞", slog.Any("error", err))
		return
	}
	b.forceReplyHandlers[sentMsg.MessageID] = b.handleChangeRoleAskForNickname
}

func (b *BotHandler) handleChangeRoleAskForNickname(_ *BotHandler, message *tgbotapi.Message) {
	nickname := strings.TrimSpace(message.Text)
	nickname = strings.TrimPrefix(nickname, "@")
	if nickname == "" {
		b.sender.SendErrorMessage(message.Chat.ID, "empty username", domain.UserRoleAdmin)
		return
	}
	exists, targetUser, err := b.service.GetUserByUsername(nickname)
	if err != nil || !exists {
		b.sender.SendErrorMessage(message.Chat.ID, fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s –Ω–µ –Ω–∞–π–¥–µ–Ω", nickname), domain.UserRoleAdmin)
		return
	}
	b.pendingRoleChange[message.Chat.ID] = targetUser.ID
	kb := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
			tgbotapi.NewKeyboardButton("–°–æ—Ç—Ä—É–¥–Ω–∏–∫"),
			tgbotapi.NewKeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	promptText := fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @%s:", nickname)
	msg2 := tgbotapi.NewMessage(message.Chat.ID, promptText)
	msg2.ReplyMarkup = kb
	_, err = b.bot.Send(msg2)
	if err != nil {
		b.log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏", slog.Any("error", err))
	}
}

func (b *BotHandler) handleRoleSelection(_ *BotHandler, message *tgbotapi.Message) {
	targetUserID, exists := b.pendingRoleChange[message.Chat.ID]
	if !exists {
		return
	}
	selectedRole := message.Text
	if selectedRole == "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" {
		selectedRole = "staff"
	} else if selectedRole == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" {
		selectedRole = "admin"
	} else if selectedRole == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" {
		selectedRole = "user"
	}
	if err := b.service.ChangeRole(targetUserID, selectedRole); err != nil {
		b.sender.SendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏", domain.UserRoleAdmin)
	} else {
		b.sender.SendSuccessMessage(message.Chat.ID, "–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞", domain.UserRoleAdmin)
	}
	delete(b.pendingRoleChange, message.Chat.ID)
}

func (b *BotHandler) handleRoleSelectionBack(_ *BotHandler, message *tgbotapi.Message) {
	if _, exists := b.pendingRoleChange[message.Chat.ID]; exists {
		delete(b.pendingRoleChange, message.Chat.ID)
	}
	b.updateUserKeyboard(message.Chat.ID, message.From.ID)
}

func (b *BotHandler) handleDeleteUserButton(_ *BotHandler, message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\t\t–ü—Ä–∏–º–µ—Ä: (@petrushin_leonid):")
	msg.ReplyMarkup = tgbotapi.ForceReply{ForceReply: true}
	sentMsg, err := b.bot.Send(msg)
	if err != nil {
		b.log.Error("error while sending request for user nickname", slog.Any("error", err))
		return
	}
	b.forceReplyHandlers[sentMsg.MessageID] = b.handleDeleteUser
}

func (b *BotHandler) handleDeleteUser(_ *BotHandler, message *tgbotapi.Message) {
	nickname := message.Text
	nickname = strings.TrimPrefix(nickname, "@")
	if err := b.service.ManageWhitelist(nickname, "delete"); err != nil {
		b.log.Error("error while remove user from whitelist", "error", err)
		b.sender.SendErrorMessage(message.Chat.ID, err.Error(), domain.UserRoleAdmin)
		return
	}
	b.sender.SendSuccessMessage(message.Chat.ID, fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É–¥–∞–ª–µ–Ω", nickname), domain.UserRoleAdmin)
}

func (b *BotHandler) handleUserListButton(_ *BotHandler, message *tgbotapi.Message) {
	listText, err := b.service.Userlist()
	userRole, err := b.service.GetUserRole(uint(message.From.ID))
	if err != nil {
		b.log.Error("error while get user role", "error", err)
	}
	if err != nil {
		b.sender.SendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", domain.UserRole(userRole))
		b.updateUserKeyboard(message.Chat.ID, message.From.ID)
		b.log.Error("error while getting userlist", "error", err)
		return
	}
	b.sender.SendTextMessage(message.Chat.ID, listText, domain.UserRole(userRole))
}

func (b *BotHandler) handleCSVFileReply(_ *BotHandler, message *tgbotapi.Message) {
	if message.Document == nil {
		b.sender.SendErrorMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª.", domain.UserRoleAdmin)
		return
	}
	if !strings.HasSuffix(strings.ToLower(message.Document.FileName), ".csv") {
		b.sender.SendErrorMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è CSV.", domain.UserRoleAdmin)
		return
	}
	fileConfig := tgbotapi.FileConfig{FileID: message.Document.FileID}
	file, err := b.bot.GetFile(fileConfig)
	if err != nil {
		b.log.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞", "error", err)
		b.sender.SendErrorMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª", domain.UserRoleAdmin)
		return
	}
	fileURL := fmt.Sprintf("https://api.telegram.org/file/bot%s/%s", b.bot.Token, file.FilePath)
	resp, err := http.Get(fileURL)
	if err != nil {
		b.log.Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞", "error", err)
		b.sender.SendErrorMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", domain.UserRoleAdmin)
		return
	}
	defer resp.Body.Close()
	contentBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		b.log.Error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞", "error", err)
		b.sender.SendErrorMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª", domain.UserRoleAdmin)
		return
	}
	csvContent := string(contentBytes)
	err = b.service.SaveDiscountList(csvContent)
	if err != nil {
		b.log.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV", "error", err)
		b.sender.SendErrorMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV", domain.UserRoleAdmin)
		return
	}
	b.sender.SendSuccessMessage(message.Chat.ID, "CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", domain.UserRoleAdmin)
}
